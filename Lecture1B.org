* How particular patterns of procedures and expressions cause particular behaviors
Start it with the ~sum-of-squares~ program:
#+begin_src scheme
  (define (SOS x y)
    (+ (SQ x) (SQ y)))
  (define (SQ x)
    (* x x))
#+end_src
** Substitution Model
Kinds of expressions:
1. Numbers
2. Symbols
3. Lambda expressions
4. Definitions
5. Conditionals
6. Combinations

*** General Rule
To evaluate an application
1. Evaluate the operator to get the procedure
2. Evaluate the operands to get arguments
3. Apply the procedure to arguments
   + Copy the body of the procedure, substituting the arguments supplied for 
     the formal parameters of the procedure.
   + Evaluate the resulting new body.


Evaluation process:
#+begin_src scheme
(SOS 3 4)
#+end_src
~SOS~ gets evaluated first and reduce to
#+begin_src scheme
(+ (SQ 3) (SQ 4))
;; then
(+ (SQ 3) (* 4 4))
;; then
(+ (SQ 3) 16)
;; then
(+ 9 16)
;; finally
;; result: 25
#+end_src

#+begin_quote
The key to understanding complicated things is to know what not to look at,
what not to compute, and what not to think.
#+end_quote

*** Conditional Rule
#+begin_src scheme
  (if <predicate>
      <consequent>
      <alternative>)
#+end_src
1. Evaluate the predicate expression
   + if it yields TRUE
     evaluate the consequent expression
   + otherwise
     evaluate the alternative expression

#+begin_src scheme
  (define (+ x y)
    (if (= x 0)
        y
        (+ (-1+ x) (1+ y))))
  ;; if x is zero, y is the result
  ;; otherwise it equals to the sum of the decrement of x
  ;; and the increment of y
#+end_src
*** Peano Arithmetic
Two ways to add whole numbers:
#+begin_src scheme
  (define (+ x y)
    (if (= x 0)
        y
        (+ (-1+ x) (1+ y))))
  ;; the above way counts x's value into y one by one

  (define (+ x y)
    (if (= x 0)
        y
        (1+ (+ (-1+ x) y))))
  ;; the above way wrap y with a (1+ _) head every time decreasing
  ;; x by 1
#+end_src
They are almost identical, but some characters on the last line.

For example, if we want to do the adding of 3 and 4 with these two ways:
#+begin_src scheme
(+ 3 4)
;; substitute with the procedure
(+ 2 5)
(+ 1 6)
(+ 0 7)
7
;; end
;; But if it is the second way
(+ 3 4)
(1+ (+ 2 4))
(1+ (1+ (+ 1 4)))
(1+ (1+ (1+ (+ 0 4))))
(1+ (1+ (1+ 4)))
(1+ (1+ 5))
(1+ 6)
7
;; end
#+end_src
We can see that although the code doesn't vary that much, the shape during 
the evaluation are very different.

The first way is in a straight shape. While the second one is more of a expanding
and goes back.

The vertical is the time, the width of the shape is space, or rather memory.

The first way, Time is $\propto O(x)$. Space is constant, $O(1)$. 
This type is called **Iteration**.
The space complexity says that this program is executable in constant space.

The second way, time complexity is $O(x)$. Space complexity is $O(x)$.
This type is called **recursion**.

An iteration is a system that has all of its state in explicit variables.
For recursion, it is not the same.
*** Fibonacci Numbers: How a program represents itself

0 1 1 2 3 5 8 13 21 34 55.......

Given an $n$, calculate the $n$th Fibonacci number.
#+begin_src scheme
  (define (FIB n)
    (if (< n 2)
        n
        (+ (FIB (- n 1))
           (FIB (- n 2)))))
#+end_src
The process of computing:
#+begin_src scheme
(FIB 4)
;; recursive
(+ (FIB 3) (FIB 2))
;; then
(+ (+ (FIB 2) (FIB 1)) (+ (FIB 1) (FIB 0)))
;; and so forth...
#+end_src
We can see the problem here, a lot sub-problems got calculated multiple times.
Time complexity: $O(FIB(n))$. Space Complexity: $O(n)$.
This is a pretty bad process.

Another example:
Hanoi tower.
#+begin_src scheme
  (define (move n from to spare)
    (cond ((= n 0) "DONE")
          (else
           (move (-1+ n) from spare to)
           (print-move from to)
           (move (-1+ n) spare to from))
          ))
#+end_src
How does it execute?
#+begin_src scheme
(move 4 1 2 3) ;; move four pieces of Hanoi tower from 1 to 2 using spike 3
(move 3 1 3 2)
(print-move 1 2)
(move 3 3 2 1)
#+end_src

* Homework
1. Write Fibonacci number procedure in an iterative way in scheme.
   For this problem, writing it in C++ is piece of cake. But in scheme, 
   because I haven't learned how to store things and do a loop. I don't know
   how to implement it yet.
2. Write Hanoi tower problem solver in an iterative way.
