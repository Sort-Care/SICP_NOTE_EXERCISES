* Foreword
The programmer must seek both **perfection of part** and **adequacy of collection**.

Our traffic with the subject matter of this book involves us with three foci of 
phenomena:
1. The human mind
2. Collection of computer programs
3. The computer

Every computer program is a model, hatched in the mind, of a real or mental process.
These processes, arising from human experience and thought, 
are huge in number,
intricate in detail,
and at any time only partially understood.

If art interprets our dreams, the computer executes them in the guise of programs.

Since large programs grow from small ones, it is crucial that we develop an arsenal
of standard program structures of whose correctness we have become sure--we call 
them idioms--and learn to combine them into larger structures using organizational
techniques of proven value.

It is the responsibility of the programmer to estimate, and always to attempt to improve,
their performance.

* Preface to the First Edition
First, we want to establish the idea that a computer language is not just a way of getting
a computer to perform operations but rather that it is a novel formal medium of expressing
ideas about methodology.

Thus, programs must be written for people to read, and only incidentally for machines to 
execute.

Second, we believe that the essential material to be addressed by a subject at this level
is not the syntax of particular programming-language constructs, nor clever algorithm
for computing particular functions efficiently, nor even the mathematical analysis of
algorithms and the foundations of computing,
but rather the techniques used to control the intellectual complexity of large software
systems.

We control complexity by building abstractions that hide details when appropriate.
We control complexity by establishing conventional interfaces that enable us to construct 
systems by combining standard, well-understood pieces in a "mix and match" way.
We control complexity by establishing new languages for describing a design, each of 
which emphasizes particular aspects of the design and deemphasizes others.

Underlying our approach to this subject is our conviction that "computer science" is 
not a science and that its significance has little to do with computers
The computer revolution is a revolution in the way we think and in the way we express
what we think.

The essence of this change is the emergence of what might best be called **procedural epistemology**.
--the study of the structure of knowledge from an imperative point of view, as opposed
to the more declarative point of view taken by classical mathematical subjects.

Mathematics provides a framework for dealing precisely with notions of "what is".
Computation provides a framework for dealing precisely with notions of "how to".

Reasons for using Lisp
1. They have very few ways of forming compound expressions, and almost no syntactic structure.
2. It supports but does not enforce more of the large-scale strategies for modular decomposition
   of programs than any other language we know.
